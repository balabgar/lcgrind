//1. Two Sum Problem
class Solution {
    public int[] twoSum(int[] nums, int target) {

       Map<Integer,Integer> map = new HashMap<>();
       for(int i=0;i<nums.length;i++){
          map.put(nums[i],i);
       }
        for(int i=0;i<nums.length;i++) {
            int comp = target - nums[i];
            if(map.containsKey(comp) && map.get(comp)!=i) {
                return new int[] {i,map.get(comp)};
            }
       }
    return new int[]{};
    }
}

//2. Valid paranthesis

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
         for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(ch=='('||ch=='['||ch=='{')
              stack.push(ch);
            else {
            if(stack.isEmpty())
               return false;
            char top=stack.pop();
            if((ch==')'&&top!='(')
                    ||(ch==']'&&top!='[')
                    ||(ch=='}'&&top!='{'))
             return false;
         }
         }
    return stack.isEmpty();
    }
}

//3.   Merge two sorted linked lists

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode temp= new ListNode(0);
        ListNode current= temp;
        while (l1!=null && l2!=null){
            if (l1.val < l2. val){
                current.next=l1;
                l1=l1.next;
            }  else {
                current.next=l2;
                l2=l2.next;
            }
            current = current.next;
        }
        if(l1!=null){
        current.next=l1;
        l1=l1.next;
        }
        if(l2!=null){
        current.next=l2;
        l2=l2.next;
        }
        return temp.next;
    }
}

//4. Best time to buy and sell stock

class Solution {
    public int maxProfit(int[] prices) {
        int p,profit=0,min=prices[0];
        for(int i=0;i<prices.length;i++){
                if(prices[i]<min)
                min=prices[i];
                p=prices[i]-min;
                profit=Math.max(profit,p);
            }
        return profit;
    }
}

//5. Valid Palindrome (Eliminated special characters)
class Solution {
    public boolean isPalindrome(String s) {
        int lindex=0,rindex=s.length()-1;
        while(lindex<rindex){
            if(!Character.isLetterOrDigit(s.charAt(lindex))){
                lindex++;
            }
            else if(!Character.isLetterOrDigit(s.charAt(rindex))){
                rindex--;
            }
            else if(Character.toLowerCase(s.charAt(lindex))!=Character.toLowerCase(s.charAt(rindex))){
                return false;
            }
            else{
                lindex++;
                rindex--;
            }
        }
        return true;
    }
}
