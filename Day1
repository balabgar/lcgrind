//1. Two Sum Problem
class Solution {
    public int[] twoSum(int[] nums, int target) {

       Map<Integer,Integer> map = new HashMap<>();
       for(int i=0;i<nums.length;i++){
          map.put(nums[i],i);
       }
        for(int i=0;i<nums.length;i++) {
            int comp = target - nums[i];
            if(map.containsKey(comp) && map.get(comp)!=i) {
                return new int[] {i,map.get(comp)};
            }
       }
    return new int[]{};
    }
}

//2. Valid paranthesis

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
         for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(ch=='('||ch=='['||ch=='{')
              stack.push(ch);
            else {
            if(stack.isEmpty())
               return false;
            char top=stack.pop();
            if((ch==')'&&top!='(')
                    ||(ch==']'&&top!='[')
                    ||(ch=='}'&&top!='{'))
             return false;
         }
         }
    return stack.isEmpty();
    }
}

//3.   Merge two sorted linked lists

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode temp= new ListNode(0);
        ListNode current= temp;
        while (l1!=null && l2!=null){
            if (l1.val < l2. val){
                current.next=l1;
                l1=l1.next;
            }  else {
                current.next=l2;
                l2=l2.next;
            }
            current = current.next;
        }
        if(l1!=null){
        current.next=l1;
        l1=l1.next;
        }
        if(l2!=null){
        current.next=l2;
        l2=l2.next;
        }
        return temp.next;
    }
}

//4. Best time to buy and sell stock

class Solution {
    public int maxProfit(int[] prices) {
        int p,profit=0,min=prices[0];
        for(int i=0;i<prices.length;i++){
                if(prices[i]<min)
                min=prices[i];
                p=prices[i]-min;
                profit=Math.max(profit,p);
            }
        return profit;
    }
}

//5. Valid Palindrome (Eliminated special characters)
class Solution {
    public boolean isPalindrome(String s) {
        int lindex=0,rindex=s.length()-1;
        while(lindex<rindex){
            if(!Character.isLetterOrDigit(s.charAt(lindex))){
                lindex++;
            }
            else if(!Character.isLetterOrDigit(s.charAt(rindex))){
                rindex--;
            }
            else if(Character.toLowerCase(s.charAt(lindex))!=Character.toLowerCase(s.charAt(rindex))){
                return false;
            }
            else{
                lindex++;
                rindex--;
            }
        }
        return true;
    }
}

//6. Insert the binary tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        // Base case: if the current node is null, return null
        if (root == null) {
            return null;
        }

        // Swap the left and right children
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;

        // Recursively invert the left and right subtrees
        invertTree(root.left);
        invertTree(root.right);

        // Return the root of the inverted tree
        return root;
    }
}

// Valid Anagram

class Solution {
    public boolean isAnagram(String s, String t) {
             if (s.length() != t.length()) {
            return false;
    }
    int[] count = new int[26];
    for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            count[t.charAt(i) - 'a']--;
        }

        for (int c : count) {
            if (c != 0) {
                return false;
            }
        }

        return true;
    }
}

//Binary Search

class Solution {
    public int search(int[] nums, int target) {
         int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2; 

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return -1;
    }
}


class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int originalColor = image[sr][sc];
        
        if (originalColor == color) {
            return image;
        }
        
        dfs(image, sr, sc, originalColor, color);
        
        return image;
    }
    
    private void dfs(int[][] image, int r, int c, int originalColor, int newColor) {
        if (r < 0 || r >= image.length || c < 0 || c >= image[0].length || image[r][c] != originalColor) {
            return;
        }
        
        image[r][c] = newColor;
        
        dfs(image, r + 1, c, originalColor, newColor); // Down
        dfs(image, r - 1, c, originalColor, newColor); // Up
        dfs(image, r, c + 1, originalColor, newColor); // Right
        dfs(image, r, c - 1, originalColor, newColor); // Left
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) {
            return null;
        }
        
        if (p.val < root.val && q.val < root.val) {
            return lowestCommonAncestor(root.left, p, q);
        }
        
        if (p.val > root.val && q.val > root.val) {
            return lowestCommonAncestor(root.right, p, q);
        }
        
        return root;
    }
}
